#version 450
#extension GL_ARB_compute_shader : require
layout(local_size_x = 640, local_size_y = 1, local_size_z = 1) in;

struct Se {
    vec2 pos;
    vec2 vel;
    int health;
    int damage;
    vec2 size;
    vec2 tex1;
    vec2 tex2;
    bool alive;
    bool inserted;
};

layout(binding=0, std430) buffer EntityData {
    Se e[1280];
} entities;

struct Sv {
    vec2 pos1;
    vec2 cst1;
    vec2 tex1;
    vec2 pos2;
    vec2 cst2;
    vec2 tex2;
    vec2 pos3;
    vec2 cst3;
    vec2 tex3;
    vec2 pos4;
    vec2 cst4;
    vec2 tex4;
};

layout(binding=0, set=1, std430) buffer writeonly EntityVertexGroup {
    Sv v[1280];
} entityVertex;

struct Ss {
    float posX;
    float posY;
    int health;
};

layout(binding=1, set=1, std430) buffer writeonly EntityStatus {
    Ss s[1280];
} readback;

#define self entities.e[gl_GlobalInvocationID.x]
#define disp entityVertex.v[gl_GlobalInvocationID.x]
#define ret readback.s[gl_GlobalInvocationID.x]

void main()
{
    if (self.alive) {
        vec2 pos = self.pos;
        pos *= pos;
        self.health = (max(pos.x, pos.y) > 1.25) ? -1 : self.health;
        ret.health = self.health;
        self.alive = (self.health >= 0);
        self.pos.x += self.vel.x;
        if (self.alive) {
            if (self.vel.y > 1) {
                float valy = (entities.e[gl_GlobalInvocationID.x & 1 | 382].alive) ? entities.e[gl_GlobalInvocationID.x & 1 | 382].pos.y : entities.e[383 - (gl_GlobalInvocationID.x & 1)].pos.y;
                self.pos.y += clamp(valy - self.pos.y, self.vel.x, -self.vel.x);
            } else {
                self.pos.y += self.vel.y;
            }
        } else {
            ret.posX = self.pos.x;
            ret.posY = self.pos.y;
            self.pos.y += 100;
        }
        vec2 size = vec2(self.size.x, -self.size.y);
        disp.pos1 = self.pos - self.size;
        disp.pos2 = self.pos + self.size;
        disp.pos3 = self.pos + size;
        disp.pos4 = self.pos - size;
    } else {
        if (self.inserted) {
            self.inserted = false;
            self.alive = true;
            vec2 size = vec2(self.size.x, -self.size.y);
            disp.pos1 = self.pos - self.size;
            disp.pos2 = self.pos + self.size;
            disp.pos3 = self.pos + size;
            disp.pos4 = self.pos - size;
            disp.cst1 = disp.cst2 = disp.cst3 = disp.cst4 = vec2(0, 1);
            ret.health = self.health;
            disp.tex1.x = disp.tex4.x = self.tex1.x;
            disp.tex1.y = disp.tex3.y = self.tex1.y;
            disp.tex2.x = disp.tex3.x = self.tex2.x;
            disp.tex2.y = disp.tex4.y = self.tex2.y;
        }
    }
}
