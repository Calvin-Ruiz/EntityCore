#version 450
#extension GL_ARB_compute_shader : require
layout(local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

layout(binding=0, std430) buffer EntityData {
    vec2 pos;
    vec2 vel;
    int health;
    int damage;
    vec2 size;
    vec2 tex1;
    vec2 tex2;
    bool alive;
    bool inserted;
} entities[1024];

layout(binding=0, set=1, std430) buffer writeonly EntityVertexGroup {
    vec2 pos1;
    vec2 cst1;
    vec2 tex1;
    vec2 pos2;
    vec2 cst2;
    vec2 tex2;
    vec2 pos3;
    vec2 cst3;
    vec2 tex3;
    vec2 pos4;
    vec2 cst4;
    vec2 tex4;
} entityVertex[1024];

layout(binding=1, set=1, std430) buffer writeonly EntityStatus {
    float posX;
    float posY;
    int health;
} readback[1024];

void main()
{
    if (entities[gl_GlobalInvocationID.x].alive) {
        entities[gl_GlobalInvocationID.x].health = (abs(entities[gl_GlobalInvocationID.x].pos.x) > 1.03125) ? -1 : entities[gl_GlobalInvocationID.x].health;
        readback[gl_GlobalInvocationID.x].health = entities[gl_GlobalInvocationID.x].health;
        entities[gl_GlobalInvocationID.x].alive = (entities[gl_GlobalInvocationID.x].health >= 0);
        entities[gl_GlobalInvocationID.x].pos += entities[gl_GlobalInvocationID.x].vel;
        entityVertex[gl_GlobalInvocationID.x].pos1 = (entities[gl_GlobalInvocationID.x].alive) ? (entities[gl_GlobalInvocationID.x].pos - entities[gl_GlobalInvocationID.x].size) : vec2(100, 100);
        if (!entities[gl_GlobalInvocationID.x].alive) {
            readback[gl_GlobalInvocationID.x].posX = entities[gl_GlobalInvocationID.x].pos.x;
            readback[gl_GlobalInvocationID.x].posY = entities[gl_GlobalInvocationID.x].pos.y;
            entities[gl_GlobalInvocationID.x].pos.x += 100;
        }
    } else {
        if (entities[gl_GlobalInvocationID.x].inserted) {
            entities[gl_GlobalInvocationID.x].inserted = false;
            entities[gl_GlobalInvocationID.x].alive = true;
            entityVertex[gl_GlobalInvocationID.x].cst1.y = 1;
            entityVertex[gl_GlobalInvocationID.x].cst2 = entityVertex[gl_GlobalInvocationID.x].cst3 = entityVertex[gl_GlobalInvocationID.x].cst4 = vec2(0, 0);
            vec2 size = entities[gl_GlobalInvocationID.x].size;
            entityVertex[gl_GlobalInvocationID.x].pos1 = entities[gl_GlobalInvocationID.x].pos - size;
            size *= 2;
            entityVertex[gl_GlobalInvocationID.x].pos2 = size;
            entityVertex[gl_GlobalInvocationID.x].cst1.x = entityVertex[gl_GlobalInvocationID.x].pos3.x = entityVertex[gl_GlobalInvocationID.x].pos4.y = 0;
            entityVertex[gl_GlobalInvocationID.x].pos3.y = -size.y;
            entityVertex[gl_GlobalInvocationID.x].pos4.x = -size.x;
            readback[gl_GlobalInvocationID.x].health = entities[gl_GlobalInvocationID.x].health;
            entityVertex[gl_GlobalInvocationID.x].tex1.x = entityVertex[gl_GlobalInvocationID.x].tex4.x = entities[gl_GlobalInvocationID.x].tex1.x;
            entityVertex[gl_GlobalInvocationID.x].tex1.y = entityVertex[gl_GlobalInvocationID.x].tex3.y = entities[gl_GlobalInvocationID.x].tex1.y;
            entityVertex[gl_GlobalInvocationID.x].tex2.x = entityVertex[gl_GlobalInvocationID.x].tex3.x = entities[gl_GlobalInvocationID.x].tex2.x;
            entityVertex[gl_GlobalInvocationID.x].tex2.y = entityVertex[gl_GlobalInvocationID.x].tex4.y = entities[gl_GlobalInvocationID.x].tex2.y;
        }
    }
}
